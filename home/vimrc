set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

" My Plugins here
" text objects
Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-indent'
Plugin 'tek/vim-textobj-ruby'
" Plugin 'kana/vim-textobj-line'
" Plugin 'kana/vim-textobj-entire'
" Plugin 'nelstrom/vim-textobj-rubyblock'
" Plugin 'terryma/vim-expand-region'
" Plugin 'camelcasemotion'

" plugins
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'tpope/vim-abolish.git'
Plugin 'tpope/vim-rake.git'
Plugin 'tpope/vim-bundler.git'
Plugin 'tomtom/tcomment_vim.git'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree.git'
Plugin 'terryma/vim-multiple-cursors'

" these are making vim slow to start
" Plugin 'tpope/vim-projectionist.git'
" Plugin 'tpope/vim-rails.git'

Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-dispatch'
Plugin 'mattn/emmet-vim'

" training
" Plugin 'kbarrette/mediummode'
Plugin 'takac/vim-hardtime'

" visual
" Plugin 'blueyed/vim-diminactive.git'
" let g:diminactive_use_syntax = 1
" augroup BgHighlight
"   autocmd!
"   autocmd WinEnter * set cul
"   autocmd WinLeave * set nocul
" augroup END

" theming
" font patches installed to ~/.fonts and configured in ~/.fonts.conf.d
Plugin 'bling/vim-airline'
Plugin 'nanotech/jellybeans.vim'
" Plugin 'https://github.com/gorodinskiy/vim-coloresque.git'

" integration - floobits
Plugin 'floobits/floobits-neovim'

" integration - tmux
" Plugin 'christoomey/vim-tmux-navigator'
" Plugin 'benmills/vimux'

" integration - git
Plugin 'tpope/vim-fugitive'
Plugin 'mhinz/vim-signify'

" integration - jshint
Plugin 'wookiehangover/jshint.vim'

"   testing
Plugin 'skalnik/vim-vroom'

"   search
Plugin 'mileszs/ack.vim'
Plugin 'rking/ag.vim'

" syntax
Plugin 'kchmck/vim-coffee-script'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-haml.git'
Plugin 'groenewege/vim-less'
Plugin 'chakrit/upstart.vim'
Plugin 'scrooloose/syntastic'
Plugin 'pangloss/vim-javascript'
Plugin 'mustache/vim-mustache-handlebars'

" Plugin 'nathanaelkane/vim-indent-guides'

" Plugin 'skammer/vim-css-color'

" motions
Plugin 'Lokaltog/vim-easymotion'

"  manipulators
Plugin 'AndrewRadev/switch.vim'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-surround.git'


" requires godlygeek/tabular is included before this
Plugin 'plasticboy/vim-markdown'


" auto manipulators
Plugin 'tpope/vim-endwise'

" tabs
Plugin 'gcmt/taboo.vim'
set sessionoptions+=tabpages,globals " required for taboo

" themes
" Plugin 'thedeeno/molokai'
" Plugin 'flazz/vim-colorschemes'
" Plugin 'altercation/vim-colors-solarized'


" vim-scripts repos

" non github repos
" Plugin 'git://git.wincent.com/command-t.git'
"
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" ---------------------------------------------------------------------------
" Matchit (ruby-textobject support)
" ---------------------------------------------------------------------------
runtime macros/matchit.vim

nnoremap ,w W

" ---------------------------------------------------------------------------
" Ruby Path
" ---------------------------------------------------------------------------
" This is a work around for ftplugin/ruby.vim. If it doesn't know the ruby
" path it'll make a slow system call to look it up. Instead, let's just
" tell it where it is from the get go. This is literally 200x faster.
" test with: vim --startuptime /path/to/perf.log /path/to/ruby/file
"
" path to rbenv ruby
let g:ruby_path = system('echo $HOME/.rbenv/shims')

" ---------------------------------------------------------------------------
" Core
" ---------------------------------------------------------------------------

set relativenumber    " Show line numbers
set number            " Show abosulte number
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides
set encoding=utf-8    " Set default encoding to UTF-8

" set gdefault          " make substitution line global by default

" store swap files in one location
" set directory=~/.vim/swap,.
set noswapfile
set backup
set backupdir=~/.vim-backup
set directory=~/.vim-tmp
" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase
set hidden
" use relative numbering
" set rnu
" add keystrokes to status line
set showcmd
set nocursorline

" ----------------------------------------------------------------------------
" Status Line
" ----------------------------------------------------------------------------
set laststatus=2  " always show the status bar

" let g:airline_theme = 'monochrome'
let g:airline_powerline_fonts = 1
let g:airline#extensions#hunks#enabled = 0

" let g:airline_theme = 'jellybeans'

function! AirlineInit()
  let g:airline_section_a = airline#section#create(['branch'])
  let g:airline_section_b = airline#section#create_left(['file'])
endfunction
autocmd VimEnter * call AirlineInit()

let g:airline#extensions#default#section_truncate_width = {
  \ 'a': 45,
  \ 'b': 45,
  \ 'z': 45,
  \ }

let g:airline#extensions#default#layout = [
  \ [ 'b' ],
  \ [ 'a', 'z', 'warning' ]
  \ ]

" configure airline symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = ''
let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
" let g:airline_symbols.whitespace = 'Ξ'

" endfunction

" show tail end of file name
set statusline=%t


" 
"   " Start the status line
"   set statusline=%f\ %m\ %r
"   set statusline+=%{fugitive#statusline()}
"   set statusline+=\ Line:%l/%L[%p%%]
"   set statusline+=\ Col:%v
"   set statusline+=\ Buf:#%n
" endif

" ----------------------------------------------------------------------------
" Search
" ----------------------------------------------------------------------------

set nohlsearch  " don't highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" ----------------------------------------------------------------------------
" Ag for word under cursor
" ----------------------------------------------------------------------------
nnoremap z* *:Ag <C-r><C-w><CR>
nnoremap z8 *:Ag <C-r><C-w><CR>

" ----------------------------------------------------------------------------
" Wild settings
" ----------------------------------------------------------------------------

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore node files
set wildignore+=*/node_modules/*

set wildignore+=*/bower_components/*
set wildignore+=bower_components/*
set wildignore+=*/vendor/*
set wildignore+=*/public/*
set wildignore+=*/dist/*

" Disable temp and backup files

set wildignore+=*.swp,*~,._*

" Ignore tmp dirs
set wildignore+=*/tmp/*,*/servers/*,*/log/*

" ----------------------------------------------------------------------------
" File Types
" ----------------------------------------------------------------------------

" Some file types should wrap their text
function! s:setupWrapping()
" retrain write muscle memory
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction

" Turn on filetype plugins (:help filetype-plugin)
filetype plugin indent on

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make setlocal noexpandtab

  " Make sure all mardown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " make Python follow PEP8 for whitespace ( http://www.python.org/dev/peps/pep-0008/ )
  au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" ----------------------------------------------------------------------------
" Terminal Discovery
" ----------------------------------------------------------------------------
set t_Co=256
" set term=screen-256color
set ttyfast

" ----------------------------------------------------------------------------
" COLOR
" ----------------------------------------------------------------------------
colorscheme jellybeans
" :color grb256

" ----------------------------------------------------------------------------
" GUI options
" ----------------------------------------------------------------------------
if has('gui_running')
  " set guioptions-=T          " turn off tool bar in gvim/mvim
  set guioptions=agim        " work around text rendering bug (nerd tree causes text to disappear)
  " set guioptions-=m          " turn off menu bar in gvim/mvim
  set showtabline=0          " never show the tab bar

  " configure indent guides
  let g:indent_guides_start_level = 1
  let g:indent_guides_guide_size  = 2
  " let g:indent_guides_auto_colors = 0
  " autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#222827 ctermbg=3
  " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#1E1D1B ctermbg=4
endif

" ----------------------------------------------------------------------------
" Mouse
" ----------------------------------------------------------------------------
set mouse=a

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------
" make esc insta fire (I don't expect to use keycodes)
set ttimeoutlen=100


" ----------------------------------------------------------------------------
"  Mappings
" ----------------------------------------------------------------------------
" alias leader in normal mode
let mapleader=","

" fast console log
nmap <leader>cl Oconsole.log();<ESC>hha

" fast tab page switching
nmap `1 1gt
nmap `2 2gt
nmap `3 3gt
nmap `4 4gt
nmap `5 5gt
nmap `6 6gt
nmap `7 7gt
nmap `8 8gt
nmap `9 9gt

nmap `m1 :tabm 0<CR>
nmap `m2 :tabm 1<CR>
nmap `m3 :tabm 2<CR>
nmap `m4 :tabm 3<CR>
nmap `m5 :tabm 4<CR>
nmap `m6 :tabm 5<CR>
nmap `m7 :tabm 6<CR>
nmap `m8 :tabm 7<CR>
nmap `m9 :tabm 8<CR>
nmap `m0 :tabm 9<CR>

if has('nvim')
  " fast tab page switching
  tmap `1 <c-\><c-n>1gt
  tmap `2 <c-\><c-n>2gt
  tmap `3 <c-\><c-n>3gt
  tmap `4 <c-\><c-n>4gt
  tmap `5 <c-\><c-n>5gt
  tmap `6 <c-\><c-n>6gt
  tmap `7 <c-\><c-n>7gt
  tmap `8 <c-\><c-n>8gt
  tmap `9 <c-\><c-n>9gt

  " move to other pane easily
  nmap `h <c-\><c-n>gh
  nmap `l <c-\><c-n>gl
  nmap `k <c-\><c-n>gk
  nmap `j <c-\><c-n>gj
  tmap `h <c-\><c-n>gh
  tmap `l <c-\><c-n>gl
  tmap `k <c-\><c-n>gk
  tmap `j <c-\><c-n>gj

  " easy exit terminal mode
  " tmap jk <c-\><c-n>
  " tmap kj <c-\><c-n>
  tmap <esc> <c-\><c-n>

  nmap `o :tabnew<CR>:terminal<CR>
  tmap `q exit<CR><CR><CR>
  autocmd TermCreate * startinsert
  autocmd WinEnter term://* startinsert
endif

let g:taboo_tab_format=" %N "
let g:taboo_renamed_tab_format=" %N %l "
nmap `, :TabooRename<SPACE>
nmap `c :tabnew<CR>
nmap `m :tabm<SPACE>

" use existing buffer
" set switchbuf +=useopen

" nnoremap <SPACE> :w<CR>:Start! gulp components:compile && osascript -e 'tell application "Google Chrome" to tell the active tab of its first window to reload'<CR>
" nnoremap <SPACE> :w<CR>:silent !osascript -e 'tell application "Google Chrome" to tell the active tab of its first window to reload'<CR>
" noremap <SPACE> :w<CR>:call StripWhitespace ()<CR>a<CR>
noremap <SPACE> :w<CR>

" nnoremap <SPACE> :w<CR>:Start! gulp components:compile<CR><CR>
" inoremap 5 "
" inoremap 7 '
" inoremap dfj "
" inoremap dfk )
" inoremap dfh (
" inoremap dfn _
" NERD Tree
" nmap <leader>n :NERDTreeFind<CR>
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 50
nnoremap <leader>nn :NERDTree<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

nnoremap <leader>bp Orequire 'pry'; binding.pry<ESC>^
" file name form command line
cnoremap <leader>f <C-R>=expand("%")<CR>

" The Smash Escape - also without cursor movement
inoremap dk <Esc>

nnoremap <leader>p "+p

" select all
nmap <C-a> ggVG

" fast quit
nmap <leader>q :q<CR>

" overide built in ack mapping
map <C-f> :Ag<space>

" ctrl-P
nnoremap <silent> gu :CtrlPBuffer<CR>
nnoremap <silent> go :CtrlP<CR>
nnoremap <silent> gr :CtrlPMRU<CR>

" ctrlp - start in filename mode
let g:ctrlp_by_filename = 1
" ctrlp - show dot files
let g:ctrlp_show_hidden = 1

" repeat last command almost like dot
nnoremap <silent> g. @:

" fugative
nnoremap gs :Gstatus<CR>
nnoremap gm :Gmove

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>re :so $MYVIMRC<CR>

" tabularize plugin mappings
vmap <Leader>i :Tab

" make Y consistent with C and D
nnoremap Y y$

" remap ga to vim-rails alternate file command
nmap <leader>a :A<CR>
nmap <leader>A gl:q<CR>gh:A<CR>
nmap <leader>ra :A<CR>
" nmap gr :R<CR>

" for local replace
" nnoremap <F3> gd[{V%:s/<C-R>///gc<left><left><left>

" for global rename
" from a visual selection, sub for whole file with confirmation
vnoremap <leader>rn y:%s/<C-R>0//gc<left><left><left>

" ArgumentReWrap plugin
" nnoremap <silent> <leader>a :call argumentrewrap#RewrapArguments()<CR>

" map ; to : to save shifts

nnoremap vv V
nnoremap g4 $
nnoremap g6 ^
" shift symbols
" nmap 6 :
" imap 7 _
" nmap 8 "
" imap 8 "
" nmap * '
" imap * '
" imap jv {
" imap fn }

" inoremap 1 !
" inoremap 2 @
" inoremap 3 #
" inoremap 4 $
" inoremap 5 %
" inoremap 6 ^
" inoremap 7 &
" inoremap 8 *
" inoremap 9 [
" inoremap 0 ]

" inoremap ! 1
" inoremap @ 2
" inoremap # 3
" inoremap $ 4
" inoremap % 5
" inoremap ^ 6
" inoremap & 7
" inoremap * 8
" inoremap ( 9
" inoremap ) 0
"

" ---------------------------------------------------------------------------
" Whitespace
" ---------------------------------------------------------------------------

set nowrap                        " don't wrap lines
set softtabstop=2                 "
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

if exists("g:enable_mvim_shift_arrow")
  let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
endif

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
nmap <leader><leader>st :call StripWhitespace ()<CR>

" ---------------------------------------------------------------------------
" OPEN FILES IN DIRECTORY OF CURRENT FILE
" ---------------------------------------------------------------------------
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" ---------------------------------------------------------------------------
" Floobits
" ---------------------------------------------------------------------------
nnoremap ,fa :FlooAddBuf<CR>
nnoremap ,fd :FlooDeleteBuf<CR>
nnoremap ,fo :FlooToggleFollowMode<CR>
nnoremap ,ff :FlooFollowUser<CR>
nnoremap ,fs :FlooSummon<CR>
nnoremap ,fl :FlooClearHighlights<CR>

" ---------------------------------------------------------------------------
" Window Management
" ---------------------------------------------------------------------------
" opening and switching
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

" A whole bunch of mappings to make window management easy and a little bit
" more like tab management in other editors.
"  - Ctrl-m will maximize the current window.
"  - Ctrl-t creates a new window and maximizes it
"  - Ctrl-j and k move up/down in window stack
"    and maximize after the new bufffer is selected
"  - Ctrl h and l move left/right between window stacks
set winminheight=0

nnoremap <silent> <C-m> :wincmd _ <cr>
nnoremap <silent> <C-j> <C-W>J<C-W>20k<C-W>_
nnoremap <silent> <C-k> <C-W>k<C-W>_
nnoremap <silent> <C-h> :wincmd h <cr>
nnoremap <silent> <C-l> :wincmd l <cr>
nnoremap <silent> <C-w>m <C-w>_
nnoremap <silent> <C-n> :tabnew<cr>

" window navigation
nnoremap gh :call WinMove('h')<cr>
nnoremap gl :call WinMove('l')<cr>
nnoremap gj :call WinMove('j')<cr>
nnoremap gk :call WinMove('k')<cr>

" closing, rotating, and moving
nnoremap gH              :wincmd H<cr>
nnoremap gK              :wincmd K<cr>
nnoremap gL              :wincmd L<cr>
nnoremap gJ              :wincmd J<cr>

" ---------------------------------------------------------------------------
" Syntax highlighting
" ---------------------------------------------------------------------------
au BufRead,BufNewFile *.hamlc set ft=haml

" Show syntax highlighting groups for word under cursor
nmap <leader><leader>y :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val,"name")')
endfunc

" ----------------------------------------------------------------------------
" Smart Inserting
" ----------------------------------------------------------------------------
set formatoptions-=o "dont continue comments when pushing o/O

"smart indent when entering insert mode with i on empty lines
function! IndentWithI()
    if len(getline('.')) == 0
        return "\"_ddO"
    else
        return "i"
    endif
endfunction
nnoremap <expr> i IndentWithI()

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction

"define :HighlightLongLines command to highlight the offending parts of
"lines that are longer than the specified length (defaulting to 80)
command! -nargs=? HighlightLongLines call s:HighlightLongLines('<args>')
function! s:HighlightLongLines(width)
    let targetWidth = a:width != '' ? a:width : 79
    if targetWidth > 0
        exec 'match Todo /\%>' . (targetWidth) . 'v/'
    else
        echomsg "Usage: HighlightLongLines [natural number]"
    endif
endfunction

" ---------------------------------------------------------------------------
" Speed
" ---------------------------------------------------------------------------
" Turn off active error checking for slow-to-compile languages
"
" there may be a way to speed up the checking but this fix works and I care
" more about fast buffer switching than syntax checking.
" ---------------------------------------------------------------------------
" let g:syntastic_mode_map = { 'mode': 'active',
"                            \ 'active_filetypes': [],
"                            \ 'passive_filetypes': ['haml', 'scss', 'sass'] }

let g:syntastic_javascript_checkers = []
if filereadable(".jshintrc")
  let g:syntastic_javascript_checkers += ['jshint']
endif
if filereadable(".jscsrc")
  let g:syntastic_javascript_checkers += ['jscs']
endif
let g:syntastic_css_checkers = ['']
let g:syntastic_sass_checkers = ['']
let g:syntastic_scss_checkers = ['']
let g:syntastic_html_checkers = []
let g:syntastic_aggregate_errors = 1

" ---------------------------------------------------------------------------
" CSS
" ---------------------------------------------------------------------------
" alphabetize a css file
:command! SortCSSBraceContents :g#\({\n\)\@<=#.,/}/sort

" ----------------------------------------------------------------------------
" auto commands
" ----------------------------------------------------------------------------
" automatically reload vimrc when it's saved
" au BufWritePost .vimrc so ~/.vimrc

" ----------------------------------------------------------------------------
" under persistence
" ----------------------------------------------------------------------------
if exists("+undofile")
  " undofile - This allows you to use usdos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

" ----------------------------------------------------------------------------
" easymotion
" ----------------------------------------------------------------------------
let g:EasyMotion_leader_key = 'm'
let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
" let g:EasyMotion_do_mapping = 1 " Disable default mappings

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
onoremap ms <Plug>(easymotion-s)
map ms <Plug>(easymotion-s)
map s <Plug>(easymotion-s)
"
" map <leader>f <Plug>(easymotion-f)
" omap <leader>w <Plug>(easymotion-w)
" nmap <leader>w <Plug>(easymotion-w)
"
" nmap <leader>e <Plug>(easymotion-bd-e)
" omap <leader>e <Plug>(easymotion-bd-e)
"
" omap <leader>b <Plug>(easymotion-b)
" nmap <leader>b <Plug>(easymotion-b)

" or, if 2 character motion is desired
" nmap S <Plug>(easymotion-s2)

" JK motions: Line motions
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" replace incremental search
" map  / <Plug>(easymotion-sn)
" omap / <Plug>(easymotion-tn)

" extend n/N with more features like auto-highlight
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)

" ----------------------------------------------------------------------------
" scrolling at edges
" ----------------------------------------------------------------------------
set scrolloff=8      " Number of lines from vertical edge to start scrolling
set sidescrolloff=5 " Number of cols from horizontal edge to start scrolling
set sidescroll=1     " Number of cols to scroll at a time

" ----------------------------------------------------------------------------
" tabular
" ----------------------------------------------------------------------------
" shortcut for aligning visual selection on arbitrary character
vnoremap <leader>a :Tabularize /

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Show syntax highlighting groups for word under cursor
nmap <leader><leader>z :so $VIMRUNTIME/syntax/hitest.vim

" ---------------------------------------------------------------------------
" Retraining
" ---------------------------------------------------------------------------
" put all the nopes here until you're retrained

" retraining for smash escape
" inoremap <esc> <nop>
" cnoremap <esc> <nop>

" ---------------------------------------------------------------------------
" Switch
" ---------------------------------------------------------------------------
nnoremap - :Switch<CR>
let g:switch_custom_definitions =
    \ [
    \   { '\(\k\+\)(&:\(\S\+\))': '\1 { |x| x\.\2 }' },
    \   { '\(\k\+\)\s\={ |\(\k\+\)| \2.\(\S\+\) }': '\1(&:\3)' },
    \ ]

" ---------------------------------------------------------------------------
" SplitJoin
" ---------------------------------------------------------------------------
let g:splitjoin_split_mapping = '<leader><leader>j'
let g:splitjoin_join_mapping = '<leader><leader>k'

" ---------------------------------------------------------------------------
" Fugitive Helpers
" ---------------------------------------------------------------------------
set diffopt+=vertical
nnoremap gic :Gcommit<CR>
nnoremap gid :Gdiff<CR>
nnoremap gis :Gstatus<CR>

function! CloseDiff()
  if (&diff == 0 || getbufvar('#', '&diff') == 0)
        \ && (bufname('%') !~ '^fugitive:' && bufname('#') !~ '^fugitive:')
    echom "Not in diff view."
    return
  endif

  " close current buffer if alternate is not fugitive but current one is
  if bufname('#') !~ '^fugitive:' && bufname('%') =~ '^fugitive:'
    if bufwinnr("#") == -1
      b #
      bd #
    else
      bd
    endif
  else
    bd #
  endif
endfunction
nnoremap <Leader>gD :call CloseDiff()<cr>

" ---------------------------------------------------------------------------
" Smooth Srolling
" ---------------------------------------------------------------------------
function! SmoothScroll(up)
    if a:up
        " let scrollaction="3"
        let scrollaction="4k"
    else
        " let scrollaction="3"
        let scrollaction="4j"
    endif
    exec "normal " . scrollaction
    redraw
    let counter=1
    while counter<&scroll/4
        let counter+=1
        sleep 6m
        redraw
        exec "normal " . scrollaction
        exec "normal zz"
    endwhile
endfunction

" nnoremap K :call SmoothScroll(1)<Enter>
" nnoremap J :call SmoothScroll(0)<Enter>
map K {
map J }

" ---------------------------------------------------------------------------
" Git Gutter
" ---------------------------------------------------------------------------
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
let g:gitgutter_sign_column_always = 1

" ---------------------------------------------------------------------------
" Vroom
" ---------------------------------------------------------------------------
" let g:vroom_map_keys = 0
" let g:vroom_use_vimux = 1
" nnoremap <leader>f :VroomRunNearestTest<CR>
" nnoremap <leader>t :VroomRunTestFile<CR>

" ---------------------------------------------------------------------------
" Screen Settings
" ---------------------------------------------------------------------------
" let g:ScreenImpl = 'Tmux'
" let g:ScreenShellTmuxInitArgs = '-2'
" let g:ScreenShellInitialFocus = 'shell'
" let g:ScreenShellQuitOnVimExit = 0
" map <F10> :ScreenShellVertical<CR>
" command -nargs=? -complete=shellcmd W  :w | :call ScreenShellSend("load '".@%."';")
" map <Leader>rf :w<CR> :call ScreenShellSend("rspec ".@% . ':' . line('.'))<CR>
" map <Leader>ef :w<CR> :call ScreenShellSend("cucumber --format=pretty ".@% . ':' . line('.'))<CR>
" map <Leader>b :w<CR> :call ScreenShellSend("break ".@% . ':' . line('.'))<CR>
"

" ---------------------------------------------------------------------------
" Medium Mode
" ---------------------------------------------------------------------------
" diable medium mode by defualt
let g:mediummode_enabled=0

" ---------------------------------------------------------------------------
" Substitute
" ---------------------------------------------------------------------------

" Substitute word under cursor globally
nnoremap <leader>2 :%s/\<<C-r><C-w>\>//g<Left><Left>
" ask for confirmation
nnoremap <leader>3 :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

" Substitute selection globally
vnoremap <C-s> y<Esc>:%s/<C-r>"//g<Left><Left>
" ask for confirmation
vnoremap <A-s> y<Esc>:%s/<C-r>"//gc<Left><Left><Left>

" Folding
" CSS
" function! CSSFolds()
"   let thisline = getline(v:lnum)
"   if match(thisline, '^[a-zA-Z.#@*/]\+') >= 0
"     return ">1"
"   elseif match(thisline, '^\s*$')
"     return '1'
"   else
"     return ">0"
"   endif
" endfunction
"
" set foldmethod=expr
" set foldexpr=CSSFolds()

" setup vim helpers
" source /home/dane/code/vim-helpers/plugin/generators.vim
" nmap <leader>gc :call GenerateRubyClassDefinition()<CR>

" ---------------------------------------------------------------------------
" Hard Time
" ---------------------------------------------------------------------------
let g:hardtime_default_on = 0
let g:hardtime_maxcount = 3
let g:hardtime_showmsg = 2


" ---------------------------------------------------------------------------
" Component Navigation
" ---------------------------------------------------------------------------

function! GoToRelated(filetype)
  " getting the current component
  let l:component_root = expand('%:p:h')

  " extract component name from root
  let l:parts = split(l:component_root, '/')
  let l:component = l:parts[ len(l:parts) - 1 ]

  if l:component == 'test'
    let l:component_root = substitute(l:component_root, '/test$', '', '')
    let l:component = l:parts[ len(l:parts) - 2 ]
  endif

  " create the path to target file
  if a:filetype == 'demo'
    let l:target = l:component_root . '/demo.html'
  elseif a:filetype == 'test'
    let l:target = l:component_root . '/test/basic-test.html'
  else
    let l:target = l:component_root . '/' . l:component . '.' . a:filetype
  endif

  " navigate
  if bufexists(l:target)
    execute "silent sbuffer " . fnameescape(l:target)
    execute "normal \<c-w>\<c-p>:bd"
  else
    execute "silent e " . fnameescape(l:target)
  end

endfunction

command! GoToJS call GoToRelated('js')
command! GoToCSS call GoToRelated('scss')
command! GoToHTML call GoToRelated('html')
command! GoToDemo call GoToRelated('demo')
command! GoToTest call GoToRelated('test')

" function! REPLSend(lines)
"   call jobsend(g:last_term_job_id, add(a:lines, ''))
" endfunction

nnoremap <silent> \j :GoToJS<cr>
nnoremap <silent> \c :GoToCSS<cr>
nnoremap <silent> \h :GoToHTML<cr>
nnoremap <silent> \d :GoToDemo<cr>
nnoremap <silent> \t :GoToTest<cr>

" ---------------------------------------------------------------------------
" Highlight over 80 characters
" ---------------------------------------------------------------------------
"
" Highlight long rows
" ctermbg 52 is dark red
highlight OverLength ctermbg=52 ctermfg=white guibg=#770000
match OverLength /\%81v./
